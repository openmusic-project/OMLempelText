; OM File Header - Saved 2009/06/11 10:29:13
; (6.0011 :patc (om-make-point 558 95) (om-make-point 50 50) (om-make-point 500 400) "non documentation" 183 0 nil "2009/06/11 10:29:13")
; End File Header
(in-package :om)(load-lib-for (quote ("Omlempeltext")))(setf *om-current-persistent* (om-load-patch1 "LzTextExample" (quote ((om-load-boxcall (quote genfun) "STRING->ASCII1" (quote string->ascii) (quote ((om-load-inputfun (quote input-funbox) "A Textfile" "TEXT" (quote toto)))) (om-make-point 203 88) nil nil nil nil 1) (om-load-boxcall (quote genfun) "STRING->ASCII1" (quote string->ascii) (quote ((om-load-inputfun (quote input-funbox) "A Textfile" "TEXT" (quote toto)))) (om-make-point 35 99) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 176 60) (quote "maxpast = longueur du contexte. $petit = destructuré") "" (om-make-point 5 540) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 112 28) (quote "Generation simple") "" (om-make-point 101 466) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 47 343) (om-make-point 28 30) 20 "20" nil) (om-load-boxcall (quote genfun) "LZTEXTGENERATE" (quote lztextgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZDictionary" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer" "MAXPAST" 5) (om-load-inputfun (quote input-funbox) "An integer" "MAXLENGTH" 50) (om-load-inputfun (quote input-funbox) "T or Nil" "MOSTPROBABLE" (quote t)))) (om-make-point 25 392) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ASCII->STRING1" (quote ascii->string) (quote ((om-load-inputfun (quote input-funbox) "ascii numbers" "ASCIILIST" 112))) (om-make-point 28 454) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux21" (quote t) (quote nil) (om-make-point 76 360) (om-make-point 42 30) 2000 "2000" nil) (om-load-boxcomment "comment" (om-make-point 287 48) (quote "<- 2 - évaluer (touche v) pour générer un texte$On visualise le résultat dans le 'listener'") "" (om-make-point 393 531) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 323 99) (quote "<- 1 - sélectionner (clicker dessus), ouvrir (touche b), évaluer (touche v) puis fermer (touche b) (faire cette opération à chaque chargement de l'application openmusic ou bien lorsqu'on change les textes utilisés)") "" (om-make-point 330 198) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 43 23) (quote "texte2") "" (om-make-point 161 37) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 43 23) (quote "texte1") "" (om-make-point 26 38) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 257 31) (quote "<- 2000 = nombre de mots du texte généré") "" (om-make-point 354 457) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 268 47) (quote "<- graphe représentant le rapport de proportion (de 0 à 100) entre les mots du texte1 et ceux du texte2") "" (om-make-point 398 392) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 265 43) (quote "<- graphe représentant l'évolution du taux de déconstruction (de 0 à 100) dans le texte généré") "" (om-make-point 351 304) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 267 43) (quote "<- double-cliquer sur chaque éditeur de texte. Rentrer les textes avec des \" au début et à la fin") "" (om-make-point 296 28) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LZTEXTCROSSGENERATE" (quote lztextcrossgenerate) (quote ((om-load-inputfun (quote input-funbox) "LDICT" "LDICT" nil) (om-load-inputfun (quote input-funbox) "MAXPAST" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "MAXLENGTH" "MAXLENGTH" nil) (om-load-inputfun (quote input-funbox) "MOSTPROBABLE" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "TAUX-CHGT" "TAUX-CHGT" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 252 505) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 346 384) (om-make-point 40 70) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 60 84 109)) (quote (0 5 30 99)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict)) (list (quote t) (om-make-point 10 40) (om-make-point 335 275) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" #(#\a #\p #\p #\e #\n #\d) (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 205 23) (om-make-point 70 50) (load-buffer-textfile (quote ("\"I called a day or two afterwards and found Mr Pontifex still at Battersby, laid up with one of those attacks of liver and depression to which he was becoming more and more subject. I stayed to luncheon. The old gentleman was cross and very difficult ; he could eat nothing Ð had no appetite at all. Christina tried to coax him with a little bit of the fleshy part of a mutton chop. Ç How in the name of reason can I be asked to eat a mutton chop ? È he exclaimed angrily ;  Ç you forget, my dear Christina, that you have to deal with a stomach that is totally disorganised, È and he pushed the plate from him, pouting and frowning like a naughty old child. Writing as I do by the light of a later knowledge, I suppose I should have seen nothing in this but the worldÕs growing pains, the disturbance inseparable from transition in human things. I suppose in reality not a leaf goes yellow in autumn without ceasing to care about its sap and making the parent tree very uncomfortable by long growling and grumbling Ð but surely nature might find less irritating way of carrying on business if she would give her mind to it. Why should the generations overlap one another at all ? Why cannot we be buried as eggs in neat little cells with ten or twenty thousand pounds each wrapped round us in Bank of England notes, and wake up, as the sphex wasp does, to find that his papa and mamma have not only left ample provision at its elbow, but have been eaten by sparrows some weeks before it began to live consciously on its own account ?\"" "")) (quote textfile) #(#\a #\p #\p #\e #\n #\d) "list") "x" nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0))) nil nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 275 311) (om-make-point 65 86) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 8 37 77 103)) (quote (1 5 6 7 12)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict)) (list (quote t) (om-make-point 10 40) (om-make-point 335 275) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 349 354) (om-make-point 39 21) (list 100) "(100)" nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" #(#\a #\p #\p #\e #\n #\d) (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 70 22) (om-make-point 70 50) (load-buffer-textfile (quote ("\"Un ou deux jours après, jÕai fait une visite aux Pontifex deux ou trois jours plus tard et jÕai trouv le vieux M. Pontifex encore  Battersby ; il tait en pleine dpression et dans une de ces crises de foie qui taient de plus en plus frquentes. Je suis rest  djeuner. Le vieux monsieur tait de mauvaise humeur et impossible  satisfaire ; il ne pouvait rien manger, nÕavait pas dÕapptit. Christina tenta de lÕamadouer en mettant dans son assiette un petit morceau et sans gras dÕune ctelette de mouton. Question de bon sens, comment peut-on me demander de manger une ctelette de mouton ! È sÕcria-t-il avec colre ; Ç vous oubliez, ma chre Christina, que vous avez affaire  un estomac compltement dtraqu, È et il repoussa lÕassiette en faisant une moue et un froncement de sourcils de vieil enfant mchant. crivant, comme je le fais maintenant,  la clart de lÕexprience acquise par la suite, je suppose que je nÕaurais d voir l-dedans rien dÕautre que les souffrances  toujours croissantes de la vie, et le trouble insparable de toute transition dans les choses humaines. Je suppose en ralit que pas une feuille ne jaunit en automne sans cesser de se soucier de sa sve et sans causer beaucoup dÕennuis  lÕarbre qui lui a donn naissance, avec ses reproches et ses plaintes interminables. Tout de mme la nature pourrait trouver, si elle voulait sÕen donner la peine,  une manire moins agaante de faire son travail. Pourquoi les gnrations doivent-elles sÕimbriquer les unes dans les autres ? Pourquoi ne pourrions-nous pas tre dposs sous forme dÕÏufs dans de petites cellules bien propres, envelopp chacun dans dix ou vingt mille livres sterling en billets de la Banque dÕAngleterre pour nous veiller ensuite comme le fait la gupe sphex qui sÕaperoit que son papa et sa maman non seulement ont laiss quantit de provisions  porte de sa bouche, mais encore quÕils ont t mangs par des moineaux quelques semaines avant quÕelle-mme et commenc  vivre consciemment pour son propre compte ? Un ou deux jours aprs, jÕai fait une visite aux Pontifex deux ou trois jours plus tard et jÕai trouv le vieux M. Pontifex encore  Battersby ; il tait en pleine dpression et dans une de ces crises de foie qui taient de plus en plus frquentes. Je suis rest  djeuner. Le vieux monsieur tait de mauvaise humeur et impossible  satisfaire ; il ne pouvait rien manger, nÕavait pas dÕapptit. Christina tenta de lÕamadouer en mettant dans son assiette un petit morceau et sans gras dÕune ctelette de mouton. Question de bon sens, comment peut-on me demander de manger une ctelette de mouton ! È sÕcria-t-il avec colre ; Ç vous oubliez, ma chre Christina, que vous avez affaire  un estomac compltement dtraqu, È et il repoussa lÕassiette en faisant une moue et un froncement de sourcils de vieil enfant mchant. crivant, comme je le fais maintenant,  la clart de lÕexprience acquise par la suite, je suppose que je nÕaurais d voir l-dedans rien dÕautre que les souffrances  toujours croissantes de la vie, et le trouble insparable de toute transition dans les choses humaines. Je suppose en realité que pas une feuille ne jaunit en automne sans cesser de se soucier de sa sève et sans causer beaucoup d'ennuis à l'arbre qui lui a donné naissance, avec ses reproches et ses plaintes interminables. Tout de même la nature pourrait trouver, si elle voulait s'en donner la peine,  une manière moins agaçante de faire son travail. Pourquoi les générations doivent-elles s'imbriquer les unes dans les autres ? Pourquoi ne pourrions-nous pas être déposés sous forme d'oeufs dans de petites cellules bien propres, enveloppé chacun dans dix ou vingt mille livres sterling en billets de la Banque d'Angleterre pour nous éveiller ensuite comme le fait la guêpe sphex qui s'aperçoit que son papa et sa maman non seulement ont laissé quantité de provisions à portée de sa bouche, mais encore qu'ils ont été mangés par des moineaux quelques semaines avant qu'elle-même eût commencé à vivre consciemment pour son propre compte ?\"" "")) (quote textfile) #(#\a #\p #\p #\e #\n #\d) "text") "x" nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 235 40) (quote "<- nombre de lectures du texte pour l'élaboration du dictionnaire (de 10 à 40)") "" (om-make-point 300 149) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 168 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ASCII->STRING" (quote ascii->string) (quote ((om-load-inputfun (quote input-funbox) "ascii numbers" "ASCIILIST" 112))) (om-make-point 270 551) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZTEXTIFY" (quote lztextify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" (list (quote a) (quote b) (quote c))) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1))) (om-make-point 215 199) nil nil "x" nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 268 161) (om-make-point 28 30) 35 "35" nil) (om-load-boxcall (quote genfun) "LZTEXTIFY" (quote lztextify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" (list (quote a) (quote b) (quote c))) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1))) (om-make-point 88 209) nil (list nil) "x" nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 289 459) (om-make-point 42 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 153 174) (om-make-point 28 30) 35 "35" nil))) (quote ((18 1 0 0 nil 0) (21 1 1 0 nil 0) (27 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 5 2 nil 0) (5 0 6 0 nil 0) (23 0 16 0 nil 0) (19 0 16 1 nil 0) (28 0 16 2 nil 0) (17 0 16 4 nil 0) (27 0 23 0 nil 0) (25 0 23 1 nil 0) (16 0 24 0 nil 0) (0 0 25 0 nil 0) (26 0 25 1 nil 0) (1 0 27 0 nil 0) (29 0 27 1 nil 0))) nil 6.0011))